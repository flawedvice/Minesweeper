{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../cell/cell.component\";\n\nfunction BoardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ÉµÉµgetCurrentView();\n\n    i0.ÉµÉµelementStart(0, \"div\");\n    i0.ÉµÉµelementStart(1, \"app-cell\", 2);\n    i0.ÉµÉµlistener(\"click\", function BoardComponent_div_1_Template_app_cell_click_1_listener() {\n      const restoredCtx = i0.ÉµÉµrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ÉµÉµnextContext();\n      return ctx_r3.getCellPosition(i_r2);\n    });\n    i0.ÉµÉµelementEnd();\n    i0.ÉµÉµelementEnd();\n  }\n\n  if (rf & 2) {\n    const cell_r1 = ctx.$implicit;\n    i0.ÉµÉµadvance(1);\n    i0.ÉµÉµproperty(\"value\", cell_r1);\n  }\n}\n\nexport let BoardComponent = /*#__PURE__*/(() => {\n  class BoardComponent {\n    constructor() {\n      this.rows = 16;\n      this.boardCells = Array(this.rows * this.rows).fill('');\n      this.bombs = 24;\n    }\n\n    ngOnInit() {\n      this.newGame();\n    }\n\n    newGame() {\n      this.placeBombs();\n      this.fillSafePositions();\n    }\n\n    placeBombs() {\n      for (let i = 0; i <= this.bombs; i++) {\n        let cell = Math.floor(Math.random() * 16 * 16);\n        this.boardCells[cell] = 'ðŸ’£';\n      }\n    }\n\n    checkSurroundings(bombPosition) {\n      let safePositions = []; // Bomb is on Left border\n\n      if (bombPosition % 16 === 0) {\n        this.boardCells[bombPosition + 1] !== 'ðŸ’£' && safePositions.push(bombPosition + 1); // Bomb is on Upper border\n\n        if (bombPosition - 16 < 0) {\n          this.boardCells[bombPosition + 16] !== 'ðŸ’£' && safePositions.push(bombPosition + 16);\n          this.boardCells[bombPosition + 17] !== 'ðŸ’£' && safePositions.push(bombPosition + 17);\n        } // Bomb is on Lower border\n        else if (bombPosition + 16 > this.rows * this.rows) {\n          this.boardCells[bombPosition - 16] !== 'ðŸ’£' && safePositions.push(bombPosition - 16);\n          this.boardCells[bombPosition - 15] !== 'ðŸ’£' && safePositions.push(bombPosition - 15);\n        } else {\n          this.boardCells[bombPosition - 16] !== 'ðŸ’£' && safePositions.push(bombPosition - 16);\n          this.boardCells[bombPosition - 15] !== 'ðŸ’£' && safePositions.push(bombPosition - 15);\n          this.boardCells[bombPosition + 16] !== 'ðŸ’£' && safePositions.push(bombPosition + 16);\n          this.boardCells[bombPosition + 17] !== 'ðŸ’£' && safePositions.push(bombPosition + 17);\n        }\n      } // Bomb is on Right border\n      else if ((bombPosition - 15) % 16 === 0) {\n        this.boardCells[bombPosition - 1] !== 'ðŸ’£' && safePositions.push(bombPosition - 1); // Bomb is on Upper border\n\n        if (bombPosition - 16 < 0) {\n          this.boardCells[bombPosition + 15] !== 'ðŸ’£' && safePositions.push(bombPosition + 15);\n          this.boardCells[bombPosition + 16] !== 'ðŸ’£' && safePositions.push(bombPosition + 16);\n        } // Bomb is on Lower border\n        else if (bombPosition + 16 > this.rows * this.rows) {\n          this.boardCells[bombPosition - 17] !== 'ðŸ’£' && safePositions.push(bombPosition - 17);\n          this.boardCells[bombPosition - 16] !== 'ðŸ’£' && safePositions.push(bombPosition - 16);\n        } else {\n          this.boardCells[bombPosition - 17] !== 'ðŸ’£' && safePositions.push(bombPosition - 17);\n          this.boardCells[bombPosition - 16] !== 'ðŸ’£' && safePositions.push(bombPosition - 16);\n          this.boardCells[bombPosition + 15] !== 'ðŸ’£' && safePositions.push(bombPosition + 15);\n          this.boardCells[bombPosition + 16] !== 'ðŸ’£' && safePositions.push(bombPosition + 16);\n        }\n      } else {\n        this.boardCells[bombPosition - 1] !== 'ðŸ’£' && safePositions.push(bombPosition - 1);\n        this.boardCells[bombPosition + 1] !== 'ðŸ’£' && safePositions.push(bombPosition + 1); // Bomb is on Upper border\n\n        if (bombPosition - 16 < 0) {\n          this.boardCells[bombPosition + 15] !== 'ðŸ’£' && safePositions.push(bombPosition + 15);\n          this.boardCells[bombPosition + 16] !== 'ðŸ’£' && safePositions.push(bombPosition + 16);\n          this.boardCells[bombPosition + 17] !== 'ðŸ’£' && safePositions.push(bombPosition + 17);\n        } // Bomb is on Lower border\n        else if (bombPosition + 16 > this.rows * this.rows) {\n          this.boardCells[bombPosition - 17] !== 'ðŸ’£' && safePositions.push(bombPosition - 17);\n          this.boardCells[bombPosition - 16] !== 'ðŸ’£' && safePositions.push(bombPosition - 16);\n          this.boardCells[bombPosition - 15] !== 'ðŸ’£' && safePositions.push(bombPosition - 15);\n        } else {\n          this.boardCells[bombPosition - 17] !== 'ðŸ’£' && safePositions.push(bombPosition - 17);\n          this.boardCells[bombPosition - 16] !== 'ðŸ’£' && safePositions.push(bombPosition - 16);\n          this.boardCells[bombPosition - 15] !== 'ðŸ’£' && safePositions.push(bombPosition - 15);\n          this.boardCells[bombPosition + 15] !== 'ðŸ’£' && safePositions.push(bombPosition + 15);\n          this.boardCells[bombPosition + 16] !== 'ðŸ’£' && safePositions.push(bombPosition + 16);\n          this.boardCells[bombPosition + 17] !== 'ðŸ’£' && safePositions.push(bombPosition + 17);\n        }\n      }\n\n      return safePositions;\n    }\n\n    fillSafePositions() {\n      let bombPositions = [];\n\n      for (let [index, cell] of this.boardCells.entries()) {\n        if (cell === 'ðŸ’£') {\n          bombPositions.push(index);\n        }\n      }\n\n      let safePositions = [];\n\n      for (let bomb of bombPositions) {\n        safePositions.push(...this.checkSurroundings(bomb));\n      }\n\n      safePositions.sort((a, b) => a - b);\n\n      for (let sp of safePositions) {\n        this.boardCells[sp] = String(Number(this.boardCells[sp]) + 1);\n      }\n    }\n\n    getCellPosition(index) {}\n\n  }\n\n  BoardComponent.Éµfac = function BoardComponent_Factory(t) {\n    return new (t || BoardComponent)();\n  };\n\n  BoardComponent.Éµcmp = /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: BoardComponent,\n    selectors: [[\"app-board\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[1, \"board\"], [4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"click\"]],\n    template: function BoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµelementStart(0, \"div\", 0);\n        i0.ÉµÉµtemplate(1, BoardComponent_div_1_Template, 2, 1, \"div\", 1);\n        i0.ÉµÉµelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ÉµÉµadvance(1);\n        i0.ÉµÉµproperty(\"ngForOf\", ctx.boardCells);\n      }\n    },\n    directives: [i1.NgForOf, i2.CellComponent],\n    styles: [\".board[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(16,2.2rem);grid-template-rows:repeat(16,2.2rem);grid-gap:0;gap:0;grid-auto-flow:row;max-height:50vh;width:auto}\"]\n  });\n  return BoardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}